00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.12.29
Created On: 5/28/2013 2:59:42 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : 68K Disassembler
00000000                             3  * Written by : Mem Opt-in
00000000                             4  * Date       : 05-09-2012
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00001000                             8                    ORG     $1000     
00001000                             9  
00001000  =FFFFFFFF                 10  stack             EQU     $FFFFFFFF
00001000                            11  
00001000                            12  ************* Program code **************
00001000                            13  
00001000  103C 000E                 14  start         move.b  #14,d0                  ;Display feedMe header
00001004  43F9 000011EE             15                lea     feedMe,a1
0000100A  4E4F                      16                trap    #15
0000100C                            17  
0000100C  103C 000E                 18                move.b  #14,d0                  ;Ask for the starting address of user's program
00001010  43F9 00001144             19                lea     getStartMsg,a1
00001016  4E4F                      20                trap    #15
00001018                            21  
00001018  103C 0002                 22                move.b  #2,d0                   ;Store the starting address of the users assembled program in a1
0000101C  4E4F                      23                trap    #15     
0000101E  2211                      24                move.l  (a1),d1 
00001020  1E3C 0004                 25                move.b  #4,d7                   ;Set up loop counter
00001024                            26  
00001024  4EB9 0000105C             27                jsr     charsToHex              ;Convert ascii to hex
0000102A  4843                      28                swap    d3
0000102C  2C43                      29                movea.l d3,a6                  ;Store start address in a6
0000102E                            30  
0000102E  103C 000E                 31                move.b  #14,d0                  ;Ask for the ending address of user's program
00001032  43F9 0000119A             32                lea     getEndMsg,a1
00001038  4E4F                      33                trap    #15
0000103A                            34  
0000103A  103C 0002                 35                move.b  #2,d0                   ;Store the starting address of the users assembled program in a1
0000103E  4E4F                      36                trap    #15     
00001040  2211                      37                move.l  (a1),d1 
00001042  1E3C 0004                 38                move.b  #4,d7                   ;Set up loop counter
00001046                            39  
00001046  4EB9 0000105C             40                jsr     charsToHex              ;Convert ascii to hes
0000104C  4843                      41                swap    d3
0000104E  2A43                      42                movea.l d3,a5                  ;Store end address in a6 
00001050                            43  
00001050                            44       ;         move.b #14,d0                  ;Ask for the ending address of user's program
00001050                            45       ;         lea    userStart,a1
00001050                            46       ;         trap   #15
00001050                            47  
00001050                            48       ;         move.b #14,d0                  ;Ask for the ending address of user's program
00001050                            49       ;         lea    #userEnd,a1
00001050                            50       ;         trap   #15
00001050                            51  
00001050                            52  ;              move.b  #14,d0                  ;Ask for the ending address of user's program
00001050                            53  ;              move.l  userStart,d1
00001050                            54  ;              lea     d1,a1
00001050                            55  ;              trap    #15
00001050                            56  
00001050  103C 000E                 57                    move.b  #14,d0                  ;Display disassembled code
00001054  43F9 00001537             58                    lea     assembly,a1
0000105A  4E4F                      59                    trap    #15
0000105C                            60  
0000105C                            61  ; This function requires that d7 be loaded with an integer representing the number of chars to convert
0000105C                            62  ; And d1 contains the chars to be converted
0000105C                            63  ; And d2 will be saved off onto the stack
0000105C                            64  
0000105C                            65  charsToHex   
0000105C  1601                      66                move.b  d1,d3                   ;Move this char into d2
0000105E  E089                      67                lsr.l   #8,d1                   ;Shift to be ready to read next char in d1
00001060  4EB9 00001092             68                jsr     isValidAscii            ;Determines whether the inputed ascii is valid
00001066  B63C 0039                 69                cmp.b   #asciiNineInHex,d3      ;Check if the char is a digit or
0000106A  6F00 0012                 70                ble     digitInD2ToHex          ;convert the char to actual value of digit
0000106E  6000 001C                 71                bra     LetterInD2ToHex         ;convert the char to actual value of hex letter
00001072                            72  
00001072                            73  nextChar
00001072  E89B                      74                ror.l   #4,d3                   ;Rotate bits to make room for next conversion
00001074  5307                      75                sub.b   #1,d7                   ;Subtract one from the loop counter
00001076  BE3C 0000                 76                cmp.b   #0,d7
0000107A  6EE0                      77                bgt     charsToHex              ;Loop until we translate all 4 chars to hex
0000107C  4E75                      78                rts
0000107E                            79                 
0000107E                            80  digitInD2ToHex
0000107E  48E7 2000                 81                movem.l d2,-(SP)             ;save-off required registers
00001082  0403 0030                 82                subi.b  #asciiZeroInHex,d3
00001086  4CDF 0004                 83                movem.l (SP)+,d2             ;bring back saved data registers
0000108A  60E6                      84                bra     nextChar
0000108C                            85  
0000108C                            86  LetterInD2ToHex
0000108C  0403 0037                 87                subi.b  #asciiCharToHex,d3
00001090  60E0                      88                bra     nextChar
00001092                            89  
00001092                            90  isValidAscii  
00001092  4EB9 000010A8             91                jsr     isLessThanZero
00001098  4EB9 000010B2             92                jsr     isBetweenNineAndA
0000109E  B63C 0046                 93                cmp.b   #asciiFInHex,d3          ;If the char is greater than 'F', it isn't valid
000010A2  6E00 0022                 94                bgt     invalidAddress
000010A6  4E75                      95                rts 
000010A8                            96  
000010A8                            97  isLessThanZero
000010A8  B63C 0030                 98                cmp.b   #asciiZeroInHex,d3       ;Check if the char is valid 
000010AC  6D00 0018                 99                blt     invalidAddress
000010B0  4E75                     100                rts
000010B2                           101  
000010B2                           102  isBetweenNineAndA  
000010B2  B63C 0039                103                cmp.b   #asciiNineInHex,d3       ;Check if the first char is valid 
000010B6  6E00 0004                104                bgt     isLessThanA              ;If the char is greater than '9' check if it's also less than 'A'
000010BA  4E75                     105                rts
000010BC                           106  
000010BC                           107  isLessThanA
000010BC  B63C 0041                108                cmp.b   #asciiAInHex,d3         ;Check if the char is valid 
000010C0  6D00 0004                109                blt     invalidAddress          ;If char is less than 'A' 
000010C4  4E75                     110                rts
000010C6                           111                
000010C6                           112  invalidAddress
000010C6  103C 000E                113                move.b  #14,d0                  ;Ask for the starting address of user's program
000010CA  43F9 000010EE            114                lea     inputError,a1
000010D0  4E4F                     115                trap    #15
000010D2  6000 0002                116                bra     finished
000010D6                           117  
000010D6                           118  finished
000010D6  FFFF FFFF                119  end               SIMHALT                                       ; halt simulator
000010DA                           120    
000010DA                           121  * Put variables and constants here
000010DA                           122  
000010DA  =00004000                123  userStart         EQU     $4000
000010DA  =00004002                124  userEnd           EQU     $4002
000010DA                           125  
000010DA  =0000000D                126  CR                EQU     $0D
000010DA  =0000000A                127  LF                EQU     $0A
000010DA                           128  
000010DA  =00000030                129  asciiZeroInHex    EQU     $30
000010DA  =00000039                130  asciiNineInHex    EQU     $39
000010DA  =00000041                131  asciiAInHex       EQU     $41
000010DA  =00000046                132  asciiFInHex       EQU     $46
000010DA  =00000037                133  asciiCharToHex    EQU     $37   
000010DA                           134  d1ToHex
000010DA                           135  
000010DA                           136  d1ToAscii
000010DA  48E7 3C00                137                movem.l d2-d5,-(SP)         save-off required registers
000010DE  303C 000E                138                move    #14,d0              task number into D0
000010E2  43F8 000D                139                lea     CR,a1             address of string
000010E6  4E4F                     140                trap    #15                 display return, linefeed
000010E8  4CDF 003C                141                movem.l (SP)+,d2-d5         bring back saved data registers
000010EC  4E75                     142                rts                         return
000010EE                           143  
000010EE= 0D 0A                    144  inputError    dc.b    CR,LF
000010F0= 54 68 61 74 20 69 ...    145                dc.b    'That is not a valid address register, please enter a valid hexadecimal address.',CR,LF,CR,LF,0
00001144                           146  
00001144= 0D 0A                    147  getStartMsg   dc.b    CR,LF
00001146= 50 6C 65 61 73 65 ...    148                dc.b    'Please enter the 4 digit hexadecimal start address of your assembled assembly: ',CR,LF,CR,LF,0
0000119A                           149  
0000119A= 0D 0A                    150  getEndMsg     dc.b    CR,LF
0000119C= 50 6C 65 61 73 65 ...    151                dc.b    'Please enter the 4 digit hexadecimal end address of your assembled assembly: ',CR,LF,CR,LF,0
000011EE                           152  
000011EE= 0D 0A                    153  feedMe        dc.b                                                                                     CR,LF 
000011F0= 20 2A 2A 2A 2A 2A ...    154                dc.b    ' ************************************************************************ '    ,CR,LF
0000123C= 2A 20 20 20 20 20 ...    155                dc.b    '*                                                                        *'    ,CR,LF
00001288= 2A 20 20 36 38 4B ...    156                dc.b    '*  68K68K    68K68K    68K68K    68K6             6        6   68K68K    *'    ,CR,LF
000012D4= 2A 20 20 38 20 20 ...    157                dc.b    '*  8         8         8         8   8            8 8    8 8   8         *'    ,CR,LF
00001320= 2A 20 20 4B 20 20 ...    158                dc.b    '*  K         K         K         K    K           K  K  K  K   K         *'    ,CR,LF
0000136C= 2A 20 20 36 38 4B ...    159                dc.b    '*  68K68K    68K68K    68K68K    6    6           6   66   6   68K68K    *'    ,CR,LF
000013B8= 2A 20 20 38 20 20 ...    160                dc.b    '*  8         8         8         8    8           8        8   8         *'    ,CR,LF
00001404= 2A 20 20 4B 20 20 ...    161                dc.b    '*  K         K         K         K   K            K        K   K         *'    ,CR,LF
00001450= 2A 20 20 36 20 20 ...    162                dc.b    '*  6         68K68K    68K68K    68K6             6        6   68K68K    *'    ,CR,LF
0000149C= 2A 20 20 20 20 20 ...    163                dc.b    '*                                                                        *'    ,CR,LF
000014E8= 20 2A 2A 2A 2A 2A ...    164                dc.b    ' ************************************************************************ '    ,CR,LF,CR,LF,0
00001537                           165  
00001537= 0D 0A                    166  assembly      dc.b                                                                                      CR,LF
00001539= 20 2A 2A 2A 2A 2A ...    167                dc.b    ' ************************************************************************* '    ,CR,LF
00001586= 2A 20 20 20 20 20 ...    168                dc.b    '*                                                                         *'    ,CR,LF
000015D3= 2A 20 20 20 20 36 ...    169                dc.b    '*    68K     68K6   68K6   68K68K   6        6   68K68    6      6     6  *'    ,CR,LF
00001620= 2A 20 20 20 38 20 ...    170                dc.b    '*   8   8   8       8      8        8 8    8 8   8    8   8       8   8   *'    ,CR,LF
0000166D= 2A 20 20 4B 20 20 ...    171                dc.b    '*  K     K   K       K     K        K  K  K  K   K   K    K        K K    *'    ,CR,LF
000016BA= 2A 20 20 36 38 4B ...    172                dc.b    '*  68K68K6    6       6    68K68K   6   66   6   68K6     6         6     *'    ,CR,LF
00001707= 2A 20 20 38 20 20 ...    173                dc.b    '*  8     8     8       8   8        8        8   8   8    8         8     *'    ,CR,LF
00001754= 2A 20 20 4B 20 20 ...    174                dc.b    '*  K     K      K       K  K        K        K   K    K   K         K     *'    ,CR,LF
000017A1= 2A 20 20 36 20 20 ...    175                dc.b    '*  6     6  68K6    68K6   68K68K   6        6   68K68    68K68K    6     *'    ,CR,LF
000017EE= 2A 20 20 20 20 20 ...    176                dc.b    '*                                                                         *'    ,CR,LF
0000183B= 20 2A 2A 2A 2A 2A ...    177                dc.b    ' ************************************************************************* '    ,CR,LF,CR,LF,0
0000188B                           178                
0000188B                           179                end  start        ;last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASCIIAINHEX         41
ASCIICHARTOHEX      37
ASCIIFINHEX         46
ASCIININEINHEX      39
ASCIIZEROINHEX      30
ASSEMBLY            1537
CHARSTOHEX          105C
CR                  D
D1TOASCII           10DA
D1TOHEX             10DA
DIGITIND2TOHEX      107E
END                 10D6
FEEDME              11EE
FINISHED            10D6
GETENDMSG           119A
GETSTARTMSG         1144
INPUTERROR          10EE
INVALIDADDRESS      10C6
ISBETWEENNINEANDA   10B2
ISLESSTHANA         10BC
ISLESSTHANZERO      10A8
ISVALIDASCII        1092
LETTERIND2TOHEX     108C
LF                  A
NEXTCHAR            1072
STACK               FFFFFFFF
START               1000
USEREND             4002
USERSTART           4000
